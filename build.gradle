plugins {
	id 'org.springframework.boot' version '2.6.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
    id 'jacoco'
}

group = 'com.algaworks'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

ext {
    set('junitVersion', '5.8.2')
    set('cucumberVersion', '7.4.1')
    set('mapstructVersion', '1.5.1.Final')
    set('mockitoJunitVersion', '2.23.0')
    set('springCloudVersion', '3.1.3')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign:${springCloudVersion}"
    implementation "org.springframework.cloud:spring-cloud-starter-sleuth:${springCloudVersion}"
    implementation "org.springframework.cloud:spring-cloud-sleuth-zipkin:${springCloudVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation 'org.jetbrains:annotations:23.0.0'

    runtimeOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    implementation 'io.micrometer:micrometer-registry-prometheus:1.9.2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoJunitVersion}"
    testImplementation "io.cucumber:cucumber-core:${cucumberVersion}"
    testImplementation "io.cucumber:cucumber-java:${cucumberVersion}"
    testImplementation "io.cucumber:cucumber-junit:${cucumberVersion}"
    testImplementation "io.cucumber:cucumber-spring:${cucumberVersion}"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junitVersion}"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/reports/jacoco/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        csv.enabled false
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/jacocoXml")
        html.enabled true
        html.destination file("${buildDir}/reports/jacoco/jacocoHtml")
    }
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/algaworks/algafood/Application*',
                    'com/algaworks/algafood/application/config/*',
                    'com/algaworks/algafood/application/controllers/exceptions/*',
                    'com/algaworks/algafood/application/controllers/validation/model/ResponseMessageSet*',
                    'com/algaworks/algafood/application/controllers/validation/aspect/DeviceValidationAspect*',
                    'com/algaworks/algafood/application/controllers/validation/aspect/ValidateHeaderNotBlankHandlerMethodArgumentResolver',
                    'com/algaworks/algafood/domain/data*',
                    'com/algaworks/algafood/domain/utils/*',
                    'com/algaworks/algafood/domain/exception/*',
                    'com/algaworks/algafood/domain/config/*',
                    'com/algaworks/algafood/domain/mapper/*',
                    'com/algaworks/algafood/infrastructure/mappers*',
                    'com/algaworks/algafood/infrastructure/data*',
            ])
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.95
            }
            excludes = [
                    'com.algaworks.algafood.Application',
                    'com.algaworks.algafood.application.config.*',
                    'com.algaworks.algafood.application.controllers.exceptions.*',
                    'com.algaworks.algafood.application.controllers.validation.model.ResponseMessageSet*',
                    'com.algaworks.algafood.application.controllers.validation.aspect.DeviceValidationAspect*',
                    'com.algaworks.algafood.application.controllers.validation.aspect.ValidateHeaderNotBlankHandlerMethodArgumentResolver',
                    'com.algaworks.algafood.domain.data.*',
                    'com.algaworks.algafood.domain.utils.*',
                    'com.algaworks.algafood.domain.exception.*',
                    'com.algaworks.algafood.domain.config.*',
                    'com.algaworks.algafood.domain.mapper.*',
                    'com.algaworks.algafood.infrastructure.mappers.*',
                    'com.algaworks.algafood.infrastructure.data.*',
            ]
        }
    }
}
